# Copyright 2000, International Business Machines Corporation and others.
# All Rights Reserved.
#
# This software has been released under the terms of the IBM Public
# License.  For details, see the LICENSE file in the top-level source
# directory or online at http://www.openafs.org/dl/license10.html
# $Header$
# 
# MakefileProto for Digital Unix systems
#
srcdir=@srcdir@
include @TOP_OBJDIR@/src/config/Makefile.config
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@


# OS specific object files:
AFS_OS_OBJS = \
	osi_crypto.o \
	osi_misc.o \
	osi_file.o \
	osi_inode.o \
	osi_gcpags.o \
	osi_groups.o \
	osi_sleep.o \
	osi_vcache.o \
	osi_vm.o \
	osi_vnodeops.o \
	osi_module.o \
	rand-fortuna-kernel.o

#AFS_OS_NFSOBJS = osi_vfsops_nfs.o

AFS_OS_NONFSOBJS = osi_vfsops.o


# System specific build commands and flags
DEFINES= -D_KERNEL -DKERNEL -DKERNEL_PRIVATE -DDIAGNOSTIC -DUSE_SELECT -DMACH_USER_API -DMACH_KERNEL

<ppc_darwin_70 ppc_darwin_80 x86_darwin_80>
KOPTS_DBUG=-g
<ppc_darwin_90 x86_darwin_90>
KOPTS_DBUG=-ggdb
<all -ppc_darwin_70 -ppc_darwin_80 -x86_darwin_80 -ppc_darwin_90 -x86_darwin_90>
KOPTS_DBUG=-gdwarf-2
<all -ppc_darwin_70>
KOPTS_common = -static \
	       -nostdinc \
	       -fno-builtin \
	       -finline \
	       -DPAGE_SIZE_FIXED
KOPTS_ppc = $(KOPTS_common) \
	    -fno-keep-inline-functions \
	    -msoft-float \
	    -mlong-branch \
	    -fsigned-bitfields \
	    -arch ppc \
	    -Dppc -DPPC -D__PPC__ \
	    -mcpu=750 \
	    -mmultiple \
	    -fschedule-insns \
	    -force_cpusubtype_ALL
KOPTS_i386 = $(KOPTS_common) \
	    -fmessage-length=0 \
	    -pipe \
	    -Wno-trigraphs \
	    -force_cpusubtype_ALL \
	    -msoft-float \
	    -O0 \
	    -fno-common \
	    -mkernel \
	    -fno-keep-inline-functions \
	    -fasm-blocks \
	    -arch i386 \
	    -Di386 -DI386 -D__I386__
KOPTS_x86_64 = $(KOPTS_common) \
	      -fno-keep-inline-functions \
	      -msoft-float \
	      -fsigned-bitfields \
	      -arch x86_64 \
	      -Damd64 -DAMD64 -D__AMD64__ \
	      -march=x86-64 \
	      -falign-functions=4 \
	      -m64 \
	      -mkernel \
	      -mno-red-zone
KOPTS_arm64 = $(KOPTS_common) \
	      -fsigned-bitfields \
	      -arch arm64e \
	      -Darm64e -DARM64E -D__ARM64E__ \
	      -falign-functions=4 \
	      -m64 \
	      -mkernel \
	      -mno-red-zone

CFLAGS_common = $(DEFINES) \
		$(KOPTS_DBUG) \
		$(KINCLUDES) $(COMMON_INCLUDE) \
		$(KERN_DBG)
CRULE_NOOPT_common = $(CC) $(CFLAGS_common) $(CFLAGS_$@)
CRULE_OPT_common = $(CRULE_NOOPT_common) $(KERN_OPTMZ)

# Default values; overridden by the ARCH_foo sections below.
OBJ_ppc =
OBJ_i386 =
OBJ_x86_64 =
OBJ_arm64 =

# Default to ':', so the default command is to do nothing and return success.
CRULE_NOOPT_ppc = :
CRULE_NOOPT_i386 = :
CRULE_NOOPT_x86_64 = :
CRULE_NOOPT_arm64 = :
CRULE_OPT_ppc = :
CRULE_OPT_i386 = :
CRULE_OPT_x86_64 = :
CRULE_OPT_arm64 = :

ifeq ($(ARCH_ppc),yes)
    OBJ_ppc = $@.ppc
    CRULE_NOOPT_ppc = $(CRULE_NOOPT_common) $(KOPTS_ppc) -o $(OBJ_ppc) -c
    CRULE_OPT_ppc =   $(CRULE_OPT_common)   $(KOPTS_ppc) -o $(OBJ_ppc) -c
endif
ifeq ($(ARCH_i386),yes)
    OBJ_i386 = $@.i386
    CRULE_NOOPT_i386 = $(CRULE_NOOPT_common) $(KOPTS_i386) -o $(OBJ_i386) -c
    CRULE_OPT_i386 =   $(CRULE_OPT_common)   $(KOPTS_i386) -o $(OBJ_i386) -c
endif
ifeq ($(ARCH_x86_64),yes)
    OBJ_x86_64 = $@.x86_64
    CRULE_NOOPT_x86_64 = $(CRULE_NOOPT_common) $(KOPTS_x86_64) -o $(OBJ_x86_64) -c
    CRULE_OPT_x86_64 =   $(CRULE_OPT_common)   $(KOPTS_x86_64) -o $(OBJ_x86_64) -c
endif
ifeq ($(ARCH_arm64),yes)
    OBJ_arm64 = $@.arm64
    CRULE_NOOPT_arm64 = $(CRULE_NOOPT_common) $(KOPTS_arm64) -o $(OBJ_arm64) -c
    CRULE_OPT_arm64 =   $(CRULE_OPT_common)   $(KOPTS_arm64) -o $(OBJ_arm64) -c
endif

<all -ppc_darwin_70 -ppc_darwin_80 -x86_darwin_80 -ppc_darwin_90 -x86_darwin_90>
KLINKER=-Xlinker -kext

<all>

# On arm64, we must link the kernel module with '-arch arm64e', even though
# '-arch arm64' is the default on arm64. So, if '-arch arm64' is in our
# ARCHFLAGS, translate it into '-arch arm64e'. And if no ARCHFLAGS are set at
# all, we must set '-arch arm64e'.
KERN_ARCHFLAGS = $(patsubst arm64,arm64e,$(ARCHFLAGS))
ifeq ($(KERN_ARCHFLAGS),)
  ifeq ($(ARCH_arm64),yes)
    KERN_ARCHFLAGS=-arch arm64e
  endif
endif
MODLD=$(CC) -static $(KOPTS_DBUG) -nostdlib $(KERN_ARCHFLAGS)

# Name of directory to hold object files and libraries.
KOBJ = MODLOAD

# This tells Makefile.common to use it's single directory build target.
COMPDIRS = single_compdir
INSTDIRS = single_instdir
DESTDIRS = single_destdir

include Makefile.common

<all -ppc_darwin_70>

# libafs shouldn't use this pattern rule for building anything; all objects
# should be built with CRULE_NOOPT or CRULE_OPT. But make sure nothing uses
# this .c.o rule to build anything, to avoid accidentally building something
# differently than CRULE_NOOPT/CRULE_OPT.
.c.o:
	# Use CRULE_NOOPT instead.
	false

OBJ_allarch = $(OBJ_ppc) $(OBJ_i386) $(OBJ_x86_64) $(OBJ_arm64)

# The trailing ':' in these commands is there to ignore the filename we are
# given. We are normally invoked like this:
#     $(CRULE_NOOPT) $(TOP_SRC_AFS)/afs_cell.c
#
# but our rules are too complex to use a single source filename argument. We
# use $< internally as the source file to build, so just ignore the filename
# given to us.
CRULE_NOOPT = $(CRULE_NOOPT_ppc)    $< && \
	      $(CRULE_NOOPT_i386)   $< && \
	      $(CRULE_NOOPT_x86_64) $< && \
	      $(CRULE_NOOPT_arm64)  $< && \
	      lipo -output $@ -create $(OBJ_allarch) && \
	      :

CRULE_OPT = $(CRULE_OPT_ppc)    $< && \
	    $(CRULE_OPT_i386)   $< && \
	    $(CRULE_OPT_x86_64) $< && \
	    $(CRULE_OPT_arm64)  $< && \
	    lipo -output $@ -create $(OBJ_allarch) && \
	    :

<ppc_darwin_70>
CFLAGS=-I. -I.. -I${TOP_OBJDIR}/src/config $(DEFINES) $(KOPTS)
KOPTS=-static -fno-common -finline -fno-keep-inline-functions -force_cpusubtype_ALL -msoft-float -mlong-branch 

<all>
setup:
	-mkdir $(KOBJ)
	-$(RM) $(KOBJ)/Makefile $(KOBJ)/Makefile.common $(KOBJ)/config
	ln -fs ../Makefile $(KOBJ)/Makefile
	ln -fs ../Makefile.common $(KOBJ)/Makefile.common
	ln -fs ../config $(KOBJ)/config
	-$(RM) -f  h rpc
	-ln -fs $(KROOT)/System/Library/Frameworks/Kernel.framework/Headers/sys h
	-ln -fs /usr/include/rpc rpc


# Below this line are targets when in the COMMON directory:
LIBAFS = libafs.o
LIBAFSNONFS = libafs.nonfs.o

INST_LIBAFS = ${DESTDIR}${afskerneldir}/afs-nfs.kext
INST_LIBAFSNONFS = ${DESTDIR}${afskerneldir}/afs.kext
DEST_LIBAFS = ${DEST}/root.client/usr/vice/etc/afs-nfs.kext
DEST_LIBAFSNONFS = ${DEST}/root.client/usr/vice/etc/afs.kext
<ppc_darwin_70 ppc_darwin_80 x86_darwin_80>
LIBAFSDSYM =
LIBAFSNONFSDSYM =
INST_LIBAFSDSYM =
INST_LIBAFSNONFSDSYM =
DEST_LIBAFSDSYM =
DEST_LIBAFSNONFSDSYM =
<all -ppc_darwin_70 -ppc_darwin_80 -x86_darwin_80>
LIBAFSDSYM = libafs.o.dSYM
LIBAFSNONFSDSYM = libafs.nonfs.o.dSYM
INST_LIBAFSDSYM = ${DESTDIR}${afskerneldir}/afs-nfs.kext.dSYM
INST_LIBAFSNONFSDSYM = ${DESTDIR}${afskerneldir}/afs.kext.dSYM
DEST_LIBAFSDSYM =  ${DEST}/root.client/usr/vice/etc/afs-nfs.kext.dSYM
DEST_LIBAFSNONFSDSYM = ${DEST}/root.client/usr/vice/etc/afs.kext.dSYM
<all>

libafs: $(LIBAFSNONFS) $(LIBAFSNONFSDSYM) ;
install_libafs: $(LIBAFSNONFS) $(LIBAFSNONFSDSYM) ;
	-mkdir -p ${INST_LIBAFSNONFS}
	-mkdir -p ${INST_LIBAFSNONFS}/Contents
	$(INSTALL) -m 644 ../Info.plist ${INST_LIBAFSNONFS}/Contents/Info.plist
	-mkdir -p ${INST_LIBAFSNONFS}/Contents/MacOS
	$(INSTALL) -m 644 ${LIBAFSNONFS} ${INST_LIBAFSNONFS}/Contents/MacOS/afs
<all -ppc_darwin_70 -ppc_darwin_80 -x86_darwin_80>
	-mkdir -p ${INST_LIBAFSNONFSDSYM}/Contents/Resources/DWARF
	$(INSTALL) ${LIBAFSNONFSDSYM}/Contents/Info.plist ${INST_LIBAFSNONFSDSYM}/Contents
	$(INSTALL) ${LIBAFSNONFSDSYM}/Contents/Resources/DWARF/${LIBAFSNONFS} ${INST_LIBAFSNONFSDSYM}/Contents/Resources/DWARF
<all>

dest_libafs: $(LIBAFSNONFS) $(LIBAFSNONFSDSYM) ;
	-mkdir -p ${DEST_LIBAFSNONFS}
	-mkdir -p ${DEST_LIBAFSNONFS}/Contents
	$(INSTALL) -m 644 ../Info.plist ${DEST_LIBAFSNONFS}/Contents/Info.plist
	-mkdir -p ${DEST_LIBAFSNONFS}/Contents/MacOS
	$(INSTALL) -m 644 ${LIBAFSNONFS} ${DEST_LIBAFSNONFS}/Contents/MacOS/afs
<all -ppc_darwin_70 -ppc_darwin_80 -x86_darwin_80>
	-mkdir -p ${DEST_LIBAFSNONFSDSYM}/Contents/Resources/DWARF
	$(INSTALL) ${LIBAFSNONFSDSYM}/Contents/Info.plist ${DEST_LIBAFSNONFSDSYM}/Contents
	$(INSTALL) ${LIBAFSNONFSDSYM}/Contents/Resources/DWARF/${LIBAFSNONFS} ${DEST_LIBAFSNONFSDSYM}/Contents/Resources/DWARF

<all>

${LIBAFS}: $(AFSAOBJS) $(AFSNFSOBJS)
	$(MODLD) -r -o ${LIBAFS} ${AFSAOBJS} ${AFSNFSOBJS} -lcc_kext ${KLINKER}

${LIBAFSNONFS}:  $(AFSAOBJS) $(AFSNONFSOBJS)
	$(MODLD) -r -o ${LIBAFSNONFS} ${AFSAOBJS} ${AFSNONFSOBJS} -lcc_kext ${KLINKER}

<all -ppc_darwin_70 -ppc_darwin_80 -x86_darwin_80>
$(LIBAFSDSYM): ${LIBAFS}
	dsymutil -o ${LIBAFS}.dSYM ${LIBAFS}
${LIBAFSNONFSDSYM}: ${LIBAFSNONFS}
	dsymutil -o ${LIBAFSNONFS}.dSYM ${LIBAFSNONFS}
<all>
